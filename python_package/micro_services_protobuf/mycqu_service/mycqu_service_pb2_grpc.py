# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from micro_services_protobuf.mycqu_service import mycqu_model_pb2 as micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2
from micro_services_protobuf.mycqu_service import mycqu_request_response_pb2 as micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2


class MycquFetcherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchUser = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchUser',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.UserInfo.FromString,
                )
        self.FetchEnrollCourseInfo = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchEnrollCourseInfo',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseInfoRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseInfoResponse.FromString,
                )
        self.FetchEnrollCourseItem = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchEnrollCourseItem',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseItemRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseItemResponse.FromString,
                )
        self.FetchExam = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchExam',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchExamRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchExamResponse.FromString,
                )
        self.FetchAllSession = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchAllSession',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchAllSessionResponse.FromString,
                )
        self.FetchCurrSessionInfo = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchCurrSessionInfo',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.CquSessionInfo.FromString,
                )
        self.FetchAllSessionInfo = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchAllSessionInfo',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchAllSessionInfoResponse.FromString,
                )
        self.FetchCourseTimetable = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchCourseTimetable',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableResponse.FromString,
                )
        self.FetchEnrollTimetable = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchEnrollTimetable',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollTimetableRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableResponse.FromString,
                )
        self.FetchScore = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchScore',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchScoreRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchScoreResponse.FromString,
                )
        self.FetchGpaRanking = channel.unary_unary(
                '/mycqu_service.MycquFetcher/FetchGpaRanking',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.GpaRanking.FromString,
                )


class MycquFetcherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchUser(self, request, context):
        """获取用户信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchEnrollCourseInfo(self, request, context):
        """获取可选课程信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchEnrollCourseItem(self, request, context):
        """获取可选具体课程信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchExam(self, request, context):
        """获取考试信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchAllSession(self, request, context):
        """获取全部学期信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchCurrSessionInfo(self, request, context):
        """获取当前学期起止日信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchAllSessionInfo(self, request, context):
        """获取全部学期起止日信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchCourseTimetable(self, request, context):
        """获取课表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchEnrollTimetable(self, request, context):
        """获取选课信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchScore(self, request, context):
        """获取成绩信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchGpaRanking(self, request, context):
        """获取绩点排名信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MycquFetcherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchUser': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchUser,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.UserInfo.SerializeToString,
            ),
            'FetchEnrollCourseInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchEnrollCourseInfo,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseInfoRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseInfoResponse.SerializeToString,
            ),
            'FetchEnrollCourseItem': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchEnrollCourseItem,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseItemRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseItemResponse.SerializeToString,
            ),
            'FetchExam': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchExam,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchExamRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchExamResponse.SerializeToString,
            ),
            'FetchAllSession': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchAllSession,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchAllSessionResponse.SerializeToString,
            ),
            'FetchCurrSessionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCurrSessionInfo,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.CquSessionInfo.SerializeToString,
            ),
            'FetchAllSessionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchAllSessionInfo,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchAllSessionInfoResponse.SerializeToString,
            ),
            'FetchCourseTimetable': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCourseTimetable,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableResponse.SerializeToString,
            ),
            'FetchEnrollTimetable': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchEnrollTimetable,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollTimetableRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableResponse.SerializeToString,
            ),
            'FetchScore': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchScore,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchScoreRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchScoreResponse.SerializeToString,
            ),
            'FetchGpaRanking': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchGpaRanking,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.GpaRanking.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mycqu_service.MycquFetcher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MycquFetcher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchUser',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.UserInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchEnrollCourseInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchEnrollCourseInfo',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseInfoRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchEnrollCourseItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchEnrollCourseItem',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseItemRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollCourseItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchExam',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchExamRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchExamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchAllSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchAllSession',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchAllSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchCurrSessionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchCurrSessionInfo',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.CquSessionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchAllSessionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchAllSessionInfo',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchAllSessionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchCourseTimetable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchCourseTimetable',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchEnrollTimetable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchEnrollTimetable',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnrollTimetableRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchCourseTimetableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchScore',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchScoreRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchScoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchGpaRanking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.MycquFetcher/FetchGpaRanking',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.GpaRanking.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CardFetcherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchCard = channel.unary_unary(
                '/mycqu_service.CardFetcher/FetchCard',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.Card.FromString,
                )
        self.FetchBills = channel.unary_unary(
                '/mycqu_service.CardFetcher/FetchBills',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchBillResponse.FromString,
                )
        self.FetchEnergyFee = channel.unary_unary(
                '/mycqu_service.CardFetcher/FetchEnergyFee',
                request_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnergyFeeRequest.SerializeToString,
                response_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.EnergyFees.FromString,
                )


class CardFetcherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchCard(self, request, context):
        """获取校园卡余额
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchBills(self, request, context):
        """获取最近30天账单信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchEnergyFee(self, request, context):
        """获取水电费信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CardFetcherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchCard': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCard,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.Card.SerializeToString,
            ),
            'FetchBills': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchBills,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchBillResponse.SerializeToString,
            ),
            'FetchEnergyFee': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchEnergyFee,
                    request_deserializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnergyFeeRequest.FromString,
                    response_serializer=micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.EnergyFees.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mycqu_service.CardFetcher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CardFetcher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.CardFetcher/FetchCard',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.Card.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchBills(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.CardFetcher/FetchBills',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.BaseLoginInfo.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchBillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchEnergyFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mycqu_service.CardFetcher/FetchEnergyFee',
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__request__response__pb2.FetchEnergyFeeRequest.SerializeToString,
            micro__services__protobuf_dot_mycqu__service_dot_mycqu__model__pb2.EnergyFees.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
