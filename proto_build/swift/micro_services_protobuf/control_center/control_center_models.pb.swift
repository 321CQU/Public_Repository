// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: micro_services_protobuf/control_center/control_center_models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 首页轮播图
public struct ControlCenter_HomepageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 封面图片信息列表，请按照回传顺序显示
  public var homepages: [ControlCenter_HomepageResponse.HomepageInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct HomepageInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 封面图片标识符（无路径前缀），如：/img/xxx.jpg
    public var imgURL: String = String()

    /// 封面图片位置
    public var imgPos: ControlCenter_HomepageResponse.HomepageInfo.ImgPos = .local

    /// 点击后跳转类型
    public var jumpType: ControlCenter_HomepageResponse.HomepageInfo.JumpType = .none

    /// 点击后跳转参数，根据不同跳转类型自行约定
    public var jumpParam: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum ImgPos: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case local // = 0
      case cos // = 1
      case UNRECOGNIZED(Int)

      public init() {
        self = .local
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .local
        case 1: self = .cos
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .local: return 0
        case .cos: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public enum JumpType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// 不跳转
      case none // = 0

      /// 跳转markdown页面
      case md // = 1

      /// 跳转url
      case url // = 2

      /// 跳转微信小程序
      case wechatMiniProgram // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .none
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .md
        case 2: self = .url
        case 3: self = .wechatMiniProgram
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .none: return 0
        case .md: return 1
        case .url: return 2
        case .wechatMiniProgram: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension ControlCenter_HomepageResponse.HomepageInfo.ImgPos: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ControlCenter_HomepageResponse.HomepageInfo.ImgPos] = [
    .local,
    .cos,
  ]
}

extension ControlCenter_HomepageResponse.HomepageInfo.JumpType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ControlCenter_HomepageResponse.HomepageInfo.JumpType] = [
    .none,
    .md,
    .url,
    .wechatMiniProgram,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension ControlCenter_HomepageResponse: @unchecked Sendable {}
extension ControlCenter_HomepageResponse.HomepageInfo: @unchecked Sendable {}
extension ControlCenter_HomepageResponse.HomepageInfo.ImgPos: @unchecked Sendable {}
extension ControlCenter_HomepageResponse.HomepageInfo.JumpType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "control_center"

extension ControlCenter_HomepageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HomepageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "homepages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.homepages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.homepages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.homepages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ControlCenter_HomepageResponse, rhs: ControlCenter_HomepageResponse) -> Bool {
    if lhs.homepages != rhs.homepages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ControlCenter_HomepageResponse.HomepageInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ControlCenter_HomepageResponse.protoMessageName + ".HomepageInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "img_url"),
    2: .standard(proto: "img_pos"),
    3: .standard(proto: "jump_type"),
    4: .standard(proto: "jump_param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.imgURL) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.imgPos) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.jumpType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.jumpParam) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imgURL, fieldNumber: 1)
    }
    if self.imgPos != .local {
      try visitor.visitSingularEnumField(value: self.imgPos, fieldNumber: 2)
    }
    if self.jumpType != .none {
      try visitor.visitSingularEnumField(value: self.jumpType, fieldNumber: 3)
    }
    if !self.jumpParam.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpParam, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ControlCenter_HomepageResponse.HomepageInfo, rhs: ControlCenter_HomepageResponse.HomepageInfo) -> Bool {
    if lhs.imgURL != rhs.imgURL {return false}
    if lhs.imgPos != rhs.imgPos {return false}
    if lhs.jumpType != rhs.jumpType {return false}
    if lhs.jumpParam != rhs.jumpParam {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ControlCenter_HomepageResponse.HomepageInfo.ImgPos: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCAL"),
    1: .same(proto: "COS"),
  ]
}

extension ControlCenter_HomepageResponse.HomepageInfo.JumpType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "MD"),
    2: .same(proto: "URL"),
    3: .same(proto: "WECHAT_MINI_PROGRAM"),
  ]
}
